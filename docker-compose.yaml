services:
  # PostgreSQL database
  db:
    image: postgres:latest
    container_name: postgres_db
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - dev
      - prod

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    profiles:
      - dev
      - prod

  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka_server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    networks:
      - backend_network
    healthcheck:
      test: [ "CMD", "curl", "-fLs", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - dev
      - prod


  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "8080:8080"
    env_file:
      - secret.env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/

    networks:
      - backend_network
    depends_on:
      eureka-server:
        condition: service_healthy
    profiles:
      - prod




  # Redis cache
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"    # Default Redis port
    restart: always
    networks:
      - backend_network
    volumes:
      - redis_data:/var/lib/redis
    profiles:
      - dev
      - prod

networks:
  backend_network:
    driver: bridge


volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
